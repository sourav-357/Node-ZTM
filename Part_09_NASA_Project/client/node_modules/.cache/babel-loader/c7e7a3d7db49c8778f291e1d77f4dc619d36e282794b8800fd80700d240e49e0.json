{"ast":null,"code":"const API_URL = 'http://localhost:8000';\n\n// Load planets and return as JSON\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  // Load launches, sort by flight number, and return as JSON.\n}\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","httpSubmitLaunch","launch","httpAbortLaunch","id"],"sources":["C:/Users/xsour/OneDrive/Desktop/New folder/Node-ZTM/P09_NASA_PROJECT/client/src/hooks/requests.js"],"sourcesContent":["const API_URL = 'http://localhost:8000';\r\n\r\n// Load planets and return as JSON\r\nasync function httpGetPlanets() {\r\n  const response = await fetch(`${API_URL}/planets`)\r\n  return await response.json();\r\n}\r\n\r\nasync function httpGetLaunches() {\r\n  // TODO: Once API is ready.\r\n  // Load launches, sort by flight number, and return as JSON.\r\n}\r\n\r\nasync function httpSubmitLaunch(launch) {\r\n  // TODO: Once API is ready.\r\n  // Submit given launch data to launch system.\r\n}\r\n\r\nasync function httpAbortLaunch(id) {\r\n  // TODO: Once API is ready.\r\n  // Delete launch with given ID.\r\n}\r\n\r\nexport {\r\n  httpGetPlanets,\r\n  httpGetLaunches,\r\n  httpSubmitLaunch,\r\n  httpAbortLaunch,\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;;AAEvC;AACA,eAAeC,cAAcA,CAAA,EAAG;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,UAAU,CAAC;EAClD,OAAO,MAAME,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC9B;AAEA,eAAeC,eAAeA,CAAA,EAAG;EAC/B;EACA;AAAA;AAGF,eAAeC,gBAAgBA,CAACC,MAAM,EAAE;EACtC;EACA;AAAA;AAGF,eAAeC,eAAeA,CAACC,EAAE,EAAE;EACjC;EACA;AAAA;AAGF,SACER,cAAc,EACdI,eAAe,EACfC,gBAAgB,EAChBE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}